# -*- coding: UTF-8 -*-

#-----------------------------------------------------------------------------
# Python source generated by wxDesigner from file: X.wdr
# Do not modify this file, all changes will be lost!
#-----------------------------------------------------------------------------

# Include wxPython modules
import wx
import wx.grid
import wx.animate

# Custom source
import version
import images
import awc.layout.images as awimages

from awc.controls.button import FlatButton
from awc.controls.button import FlatBitmapButton as BitmapButton

from awc.controls.textctrl import TextCtrl
from awc.controls.datectrl import DateCtrl
from awc.controls.checkbox import CheckBox, RCheckBox
from awc.controls.notebook import Notebook

import awc.controls.windows as aw

from awc.controls.entries import FolderEntryCtrl

import wx.lib.hyperlink as hl

from anag.basetab import WorkZoneNotebook, PhotoContainerPanel

import Env
import plib

class BranchText(wx.StaticText):
    
    def __init__(self, *args, **kwargs):
        wx.StaticText.__init__(self, *args, **kwargs)
        branch = version.VERSION_BRANCH
        self.SetLabel('(branch: %s)' % branch)
        self.SetFont(wx.Font(10, wx.SWISS, wx.NORMAL, wx.BOLD))
        self.SetForegroundColour('gray')
        if branch == 'master':
            self.Hide()


class MyChoice(wx.Choice):
    def GetValue(self):
        return self.GetClientData(self.GetSelection())


import cfg.license_wdr as licwdr
from cfg.license import License, LicenseInfoDialog

import plugins


class AboutPanel(wx.Panel):
    """
    Genitore dei Panel contenenti informazioni sul programma.
    """
    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)
        sizer = AboutFunc(self)
        def cn(x):
            return self.FindWindowByName(x)
        l = Env.Azienda.license
        try:
            rs = l.get('License', 'head')
            pi = l.get('License', 'piva')
        except:
            rs = pi = ''
        cn('appinfo').SetLabel(version.VERSION_INFO)
        if version.OSS():
            if rs:
                dul = "Copia registrata da:"
            else:
                dul = 'Copia non registrata'
                cn('panuserlic').Hide()
        else:
            dul = "Licenza d'uso rilasciata a:"
        cn('lic_ragsoc').SetLabel(rs)
        cn('lic_piva').SetLabel(pi)
        cn('destuserlic').SetLabel(dul)
        if not version.MODVERSION_NAME:
            for name in ('labelmod', 'modname', 'modversion'):
                cn(name).Show(False)
        if not version.MODVERSION_NAME and not Env.plugins:
            cn('plugins').Hide()
        self.Fit()
        self.Layout()
        self.SetSizer(sizer)
        sizer.SetSizeHints(self)
        for cid, func in ((ID_LICINFO, self.OnLicInfo),
                          (ID_VERINFO, self.OnVerInfo),
                          (ID_PLUGINS, self.OnPlugins)):
            self.Bind(wx.EVT_BUTTON, func, id=cid)
    
    def OnPlugins(self, event):
        dlg = plugins.PluginsDialog()
        dlg.ShowModal()
        dlg.Destroy()
        event.Skip()
    
    def OnLicInfo(self, event):
        dlg = LicenseInfoDialog(self)
        dlg.ShowModal()
        dlg.Destroy()
        event.Skip()
    
    def OnVerInfo(self, event):
        dlg = aw.Dialog(self, -1, 'X4GA :: Informazioni sulla versione')
        p = aw.Panel(dlg)
        VersionChangesFunc(p)
        cn = self.FindWindowByName
        from versionchanges import history
        try:
            cvc = __import__("custverchanges", fromlist=True)
            historymod = cvc.historymod
        except:
            historymod = ()
        nh = []
        nh.append(['changes', history])
        if historymod:
            nh.append(['modchanges', historymod])
        nb = aw.awu.GetAllChildrens(p, lambda x: isinstance(x, wx.Notebook))[0]
        for name in Env.plugins:
            module = Env.plugins[name]
            try:
                ph = module.plugin_history
                pp = wx.Panel(nb)
                key = 'plugin_%s_changes' % name
                ModVersionChangesVerFunc(pp, False)
                pp.FindWindowByName('changes').SetName(key)
#                 item0 = wx.FlexGridSizer(0, 1, 0, 0)
#                 item1 = wx.TextCtrl(pp, style=wx.TE_MULTILINE)
#                 item1.SetName(key)
#                 item0.Add(item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5)
#                 item0.AddGrowableCol(0)
#                 item0.AddGrowableRow(0)
                
                nb.AddPage(pp, 'Plugin %s' % name)
                nh.append([key, ph])
            except:
                pass
        for name, hist in nh:
            txt = ''
            for relver, reldat, relchg in hist:
                if txt:
                    txt += '\n\n'
                txt += "Versione %s " % relver
                if reldat is None:
                    txt += "(non rilasciata)\n"
                else:
                    txt += "del %s\n" % reldat.Format().split()[0]
                for tag, chg in relchg:
                    while '\n ' in chg:
                        chg = chg.replace('\n ', '\n')
                    txt += '\n%s\n' % tag.replace('\n', ' ')
                    txt += '%s\n' % chg.replace('\n', ' ')
                txt += '\n'
            vertxt = cn(name)
            vertxt.SetValue(txt)
            vertxt.SetEditable(False)
        nb = cn('workzone')
        nb.SetPageText(0, 'X4GA')
        if historymod:
            nb.SetPageText(1, 'cust. %s' % version.MODVERSION_NAME)
        else:
            nb.RemovePage(1)
        dlg.AddSizedPanel(p)
        dlg.Bind(wx.EVT_BUTTON, lambda *x: dlg.EndModal(wx.ID_OK))
        dlg.ShowModal()
        dlg.Destroy()
        event.Skip()


class VersionText(wx.StaticText):
    def __init__(self, parent, id, text, *args, **kwargs):
        wx.StaticText.__init__(self, parent, id, text, *args, **kwargs)
        self.SetFont(wx.Font( 12, wx.SWISS, wx.NORMAL, wx.BOLD ))

class LogoPanel(wx.Panel):
    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)
        self.SetBackgroundColour('white')
        AboutLogoPanelFunc(self)
        AboutProgramPanelFunc(self, False)
        self.Fit()
        self.Layout()


class AutoCheckUpdatesCheckBox(CheckBox):

    def __init__(self, *args, **kwargs):
        CheckBox.__init__(self, *args, **kwargs)
        self.SetDataLink(values={True: '1', False: '0'})

class AppDescStaticText(wx.StaticText):
    def __init__(self, *args, **kwargs):
        wx.StaticText.__init__(self, *args, **kwargs)
        self.SetLabel(version.appdesc)


#class ElencoTabelleAziendaCheckListBox(wx.CheckListBox):
#
#    def __init__(self, *args, **kwargs):
#        wx.CheckListBox.__init__(self, *args, **kwargs)
#        self.tabelle = []
#        self.tabdesc = {}
#        for tab in Env.Azienda.BaseTab.tabelle:
#            self.tabelle.append(tab[0])
#            self.tabdesc[tab[0]] = tab[1]
#        self.tabelle.sort()
#        for tab in self.tabelle:
#            self.Append('%s - %s' % (tab, self.tabdesc[tab]))
#    
#    def GetTables(self):
#        tables = []
#        for tab in Env.Azienda.BaseTab.tabelle:
#            i = self.tabelle.index(tab[0])
#            if self.IsChecked(i):
#                tables.append(tab[0])
#        return tables



from wx.lib.mixins.listctrl import CheckListCtrlMixin

class ElencoTabelleAziendaCheckListBox(wx.ListCtrl, CheckListCtrlMixin):

    def __init__(self, parent, id, pos, size, *args):
        wx.ListCtrl.__init__(self, parent, id, pos, size, style=wx.LC_REPORT)
        CheckListCtrlMixin.__init__(self)
        self.tabelle = []
        self.tabdesc = {}
        for tab in Env.Azienda.BaseTab.tabelle:
            self.tabelle.append(tab[0])
            self.tabdesc[tab[0]] = tab[1]
        self.tabelle.sort()
    
    def SetModeBackup(self):
        self.InsertColumn(0, "Tabella")
        self.InsertColumn(1, "Contenuto")
        self.SetColumnWidth(0, 100)
        self.SetColumnWidth(1, 240)
        for tab in self.tabelle:
            index = self.InsertStringItem(999, tab)
            self.SetStringItem(index, 0, tab)
            self.SetStringItem(index, 1, self.tabdesc[tab])
    
    def SetModeRestore(self, tabrows):
        self.InsertColumn(0, "Tabella")
        self.InsertColumn(1, "Contenuto")
        self.InsertColumn(2, "Righe", wx.LIST_FORMAT_RIGHT)
        self.SetColumnWidth(0, 100)
        self.SetColumnWidth(1, 240)
        self.SetColumnWidth(2, 60)
        for tab in self.tabelle:
            if not tabrows or tab in tabrows:
                index = self.InsertStringItem(999, tab)
                self.SetStringItem(index, 0, tab)
                self.SetStringItem(index, 1, self.tabdesc[tab])
                if tabrows and tab in tabrows:
                    self.SetStringItem(index, 2, str(tabrows[tab]))
                    self.CheckItem(index)
    
    def GetTables(self):
        tables = []
        for tab in Env.Azienda.BaseTab.tabelle:
            i = self.tabelle.index(tab[0])
            if self.IsChecked(i):
                tables.append(tab[0])
        return tables


import os
class LogoAziendaleBitmap(PhotoContainerPanel):
    
    def __init__(self, *args, **kwargs):
        kwargs['dnd'] = False
        PhotoContainerPanel.__init__(self, *args, **kwargs)
        hide = True
        p = Env.Azienda.config.get('Site', 'folder')
        if os.path.isdir(p):
            fn = os.path.join(p, 'logo_aziendale.jpg')
            if os.path.isfile(fn):
                self.display_image(fn)
                hide = False
        if hide:
            self.Hide()


class UserLicenseInfoPanel(wx.Panel):

    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)
        UserLicenseInfoFunc(self)




# Window functions

ID_LOGOPANEL = 10000
ID_LINE = 10001
ID_APPINFO = 10002
ID_DESTUSERLIC = 10003
ID_PLUGINS = 10004
ID_VERINFO = 10005
ID_LICINFO = 10006
ID_PANUSERLIC = 10007

def AboutFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item1 = LogoPanel( parent, ID_LOGOPANEL, wx.DefaultPosition, [200,160], 0 )
    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item2 = wx.StaticLine( parent, ID_LINE, wx.DefaultPosition, [20,-1], wx.LI_HORIZONTAL )
    item0.Add( item2, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item3 = wx.StaticText( parent, ID_APPINFO, "-appinfo-", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_CENTRE )
    item3.SetForegroundColour( wx.LIGHT_GREY )
    item3.SetFont( wx.Font( 8, wx.SWISS, wx.NORMAL, wx.NORMAL ) )
    item3.SetName( "appinfo" )
    item0.Add( item3, 0, wx.ALIGN_CENTER|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item4 = wx.StaticLine( parent, ID_LINE, wx.DefaultPosition, [20,-1], wx.LI_HORIZONTAL )
    item0.Add( item4, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item5 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item6 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item7 = wx.StaticText( parent, ID_DESTUSERLIC, "-destuserlic-", wx.DefaultPosition, wx.DefaultSize, 0 )
    item7.SetName( "destuserlic" )
    item6.Add( item7, 0, wx.ALIGN_BOTTOM|wx.RIGHT|wx.TOP|wx.BOTTOM, 5 )

    item8 = wx.BoxSizer( wx.HORIZONTAL )
    
    item9 = FlatButton( parent, ID_PLUGINS, "Estensioni", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.SetFont( wx.Font( 7, wx.SWISS, wx.NORMAL, wx.BOLD ) )
    item9.SetName( "plugins" )
    item8.Add( item9, 0, wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL|wx.RIGHT|wx.TOP, 5 )

    item10 = FlatButton( parent, ID_VERINFO, "Versione", wx.DefaultPosition, wx.DefaultSize, 0 )
    item10.SetFont( wx.Font( 7, wx.SWISS, wx.NORMAL, wx.BOLD ) )
    item10.SetToolTip( wx.ToolTip("Visualizza l'elenco delle modifiche apportate in questa versione e quelle precedenti") )
    item10.SetName( "verinfo" )
    item8.Add( item10, 0, wx.ALIGN_RIGHT|wx.ALIGN_BOTTOM|wx.RIGHT, 5 )

    item11 = FlatButton( parent, ID_LICINFO, "Licenza", wx.DefaultPosition, wx.DefaultSize, 0 )
    item11.SetFont( wx.Font( 7, wx.SWISS, wx.NORMAL, wx.BOLD ) )
    item11.SetToolTip( wx.ToolTip("Visualizza il testo della licenza d'uso") )
    item11.SetName( "licinfo" )
    item8.Add( item11, 0, wx.ALIGN_BOTTOM|wx.ALIGN_CENTER_HORIZONTAL|wx.RIGHT, 5 )

    item6.Add( item8, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )

    item6.AddGrowableCol( 1 )

    item5.Add( item6, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT, 5 )

    item12 = UserLicenseInfoPanel( parent, ID_PANUSERLIC, wx.DefaultPosition, wx.DefaultSize, 0 )
    item12.SetName( "panuserlic" )
    item5.Add( item12, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item5.AddGrowableCol( 0 )

    item0.Add( item5, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item0.AddGrowableCol( 0 )

    item0.AddGrowableRow( 5 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_CHANGES = 10008
ID_BTNOK = 10009

def _old_VersionChangesFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item1 = wx.TextCtrl( parent, ID_CHANGES, "", wx.DefaultPosition, [640,480], wx.TE_MULTILINE )
    item1.SetName( "changes" )
    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item2 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item3 = wx.Button( parent, ID_BTNOK, "OK", wx.DefaultPosition, wx.DefaultSize, 0 )
    item3.SetDefault()
    item3.SetName( "btnok" )
    item2.Add( item3, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item2.AddGrowableCol( 1 )

    item0.Add( item2, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )

    item0.AddGrowableCol( 0 )

    item0.AddGrowableRow( 0 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_CHANGESZONE = 10010

def VersionChangesFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item2 = WorkZoneNotebook( parent, ID_CHANGESZONE, wx.DefaultPosition, [200,160], 0 )
    item1 = item2
    
    item3 = wx.Panel( item2, -1 )
    ModVersionChangesVerFunc(item3, False)
    item2.AddPage( item3, "X4" )

    item4 = wx.Panel( item2, -1 )
    ModVersionChangesModFunc(item4, False)
    item2.AddPage( item4, "Mod" )

    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item5 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item6 = wx.Button( parent, ID_BTNOK, "OK", wx.DefaultPosition, wx.DefaultSize, 0 )
    item5.Add( item6, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item5.AddGrowableCol( 1 )

    item0.Add( item5, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )

    item0.AddGrowableCol( 0 )

    item0.AddGrowableRow( 0 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0


def ModVersionChangesVerFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item1 = wx.TextCtrl( parent, ID_CHANGES, "", wx.DefaultPosition, [640,480], wx.TE_MULTILINE )
    item1.SetName( "changes" )
    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item0.AddGrowableCol( 0 )

    item0.AddGrowableRow( 0 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_MODCHANGES = 10011

def ModVersionChangesModFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item1 = wx.TextCtrl( parent, ID_MODCHANGES, "", wx.DefaultPosition, [640,480], wx.TE_MULTILINE )
    item1.SetName( "modchanges" )
    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item0.AddGrowableCol( 0 )

    item0.AddGrowableRow( 0 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_TEXT = 10012
ID_FOREIGN = 10013
ID_MODNAME = 10014
ID_VERACT = 10015
ID_VERDISP = 10016
ID_MESSAGE = 10017
ID_PROGRESS = 10018
ID_BYTES = 10019
ID_CANCEL = 10020
ID_ACTION = 10021
ID_INFO = 10022

def _ProgramUpdateFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item1 = wx.StaticText( parent, ID_TEXT, "Controllo aggiornamenti programma", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_CENTRE )
    item1.SetForegroundColour( wx.BLUE )
    item1.SetBackgroundColour( wx.LIGHT_GREY )
    item1.SetFont( wx.Font( 11, wx.SWISS, wx.NORMAL, wx.BOLD ) )
    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item2 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item3 = wx.StaticBitmap(parent, ID_FOREIGN, images.getProgramUpdateBitmap())
    item2.Add( item3, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item4 = wx.FlexGridSizer( 0, 2, 0, 0 )
    
    item5 = wx.StaticText( parent, ID_TEXT, "mod:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item4.Add( item5, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item6 = wx.StaticText( parent, ID_MODNAME, "-", wx.DefaultPosition, wx.DefaultSize, 0 )
    item4.Add( item6, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item7 = wx.StaticText( parent, ID_TEXT, "Vers. attuale:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item4.Add( item7, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.BOTTOM, 5 )

    item8 = wx.StaticText( parent, ID_VERACT, "-", wx.DefaultPosition, wx.DefaultSize, 0 )
    item4.Add( item8, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item9 = wx.StaticText( parent, ID_TEXT, "Vers. disponibile:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item4.Add( item9, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.BOTTOM, 5 )

    item10 = wx.StaticText( parent, ID_VERDISP, "-", wx.DefaultPosition, wx.DefaultSize, 0 )
    item4.Add( item10, 0, wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item2.Add( item4, 0, wx.GROW|wx.ALL, 5 )

    item2.AddGrowableCol( 1 )

    item0.Add( item2, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item11 = wx.StaticLine( parent, ID_LINE, wx.DefaultPosition, [280,-1], wx.LI_HORIZONTAL )
    item0.Add( item11, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item12 = wx.StaticText( parent, ID_MESSAGE, "-", wx.DefaultPosition, [200,-1], 0 )
    item0.Add( item12, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item13 = wx.Gauge( parent, ID_PROGRESS, 100, wx.DefaultPosition, [-1,14], 0 )
    item0.Add( item13, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.TOP, 5 )

    item14 = wx.StaticText( parent, ID_BYTES, "", wx.DefaultPosition, wx.DefaultSize, 0 )
    item0.Add( item14, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item15 = wx.StaticLine( parent, ID_LINE, wx.DefaultPosition, [20,-1], wx.LI_HORIZONTAL )
    item0.Add( item15, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item16 = wx.BoxSizer( wx.HORIZONTAL )
    
    item17 = wx.Button( parent, ID_CANCEL, "Chiudi", wx.DefaultPosition, wx.DefaultSize, 0 )
    item16.Add( item17, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item18 = wx.Button( parent, ID_ACTION, "Verifica", wx.DefaultPosition, wx.DefaultSize, 0 )
    item18.SetDefault()
    item16.Add( item18, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item19 = wx.Button( parent, ID_INFO, "Info", wx.DefaultPosition, wx.DefaultSize, 0 )
    item16.Add( item19, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item0.Add( item16, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item0.AddGrowableCol( 0 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_TEXTCTRL = 10023
ID_BTNTEST = 10024
ID_BTNFIND = 10025
ID_AUTOCHECK = 10026
ID_BTNQUIT = 10027

def ProgramUpdateSetupFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item2 = wx.StaticBox( parent, -1, "Autenticazione" )
    item1 = wx.StaticBoxSizer( item2, wx.HORIZONTAL )
    
    item3 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item4 = wx.StaticText( parent, ID_TEXT, "Username:", wx.DefaultPosition, [180,-1], wx.ALIGN_RIGHT )
    item3.Add( item4, 0, wx.ALIGN_CENTER|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item5 = wx.TextCtrl( parent, ID_TEXTCTRL, "", wx.DefaultPosition, wx.DefaultSize, 0 )
    item5.SetName( "Updates_user" )
    item3.Add( item5, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item6 = wx.StaticText( parent, ID_TEXT, "Password:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item3.Add( item6, 0, wx.ALIGN_CENTER|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item7 = wx.TextCtrl( parent, ID_TEXTCTRL, "", wx.DefaultPosition, wx.DefaultSize, wx.TE_PASSWORD )
    item7.SetName( "Updates_pswd" )
    item3.Add( item7, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item3.Add( [ 50, 20 ] , 0, wx.ALIGN_CENTER|wx.RIGHT|wx.TOP|wx.BOTTOM, 5 )

    item3.AddGrowableCol( 1 )

    item3.AddGrowableCol( 3 )

    item1.Add( item3, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.TOP, 5 )

    item9 = wx.StaticBox( parent, -1, "Url e cartelle" )
    item8 = wx.StaticBoxSizer( item9, wx.HORIZONTAL )
    
    item10 = wx.FlexGridSizer( 0, 2, 0, 0 )
    
    item11 = wx.StaticText( parent, ID_TEXT, "Indirizzo http server:", wx.DefaultPosition, [180,-1], wx.ALIGN_RIGHT )
    item10.Add( item11, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item12 = wx.FlexGridSizer( 0, 2, 0, 0 )
    
    item13 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item14 = wx.TextCtrl( parent, ID_TEXTCTRL, "", wx.DefaultPosition, [300,-1], 0 )
    item14.SetName( "Updates_url" )
    item13.Add( item14, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item15 = wx.Button( parent, ID_BTNTEST, "Test", wx.DefaultPosition, [50,-1], 0 )
    item13.Add( item15, 0, wx.ALIGN_CENTER|wx.RIGHT|wx.TOP|wx.BOTTOM, 5 )

    item13.AddGrowableCol( 0 )

    item12.Add( item13, 0, wx.ALIGN_CENTER, 5 )

    item12.AddGrowableCol( 0 )

    item10.Add( item12, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item16 = wx.StaticText( parent, ID_TEXT, "Percorso aggiornamenti scaricati:", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_RIGHT )
    item10.Add( item16, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.BOTTOM, 5 )

    item17 = wx.FlexGridSizer( 0, 2, 0, 0 )
    
    item18 = wx.TextCtrl( parent, ID_TEXTCTRL, "", wx.DefaultPosition, [300,-1], 0 )
    item18.SetName( "Updates_folder" )
    item17.Add( item18, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item19 = wx.Button( parent, ID_BTNFIND, "Trova", wx.DefaultPosition, [50,-1], 0 )
    item17.Add( item19, 0, wx.ALIGN_CENTER|wx.RIGHT|wx.BOTTOM, 5 )

    item17.AddGrowableCol( 0 )

    item10.Add( item17, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item10.AddGrowableCol( 1 )

    item8.Add( item10, 0, wx.GROW, 5 )

    item0.Add( item8, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item21 = wx.StaticBox( parent, -1, "AutoCheck" )
    item20 = wx.StaticBoxSizer( item21, wx.VERTICAL )
    
    item22 = AutoCheckUpdatesCheckBox( parent, ID_AUTOCHECK, "Verifica la disponibilità di nuove versioni del programma ad ogni avvio", wx.DefaultPosition, wx.DefaultSize, 0 )
    item22.SetName( "Updates_autocheck" )
    item20.Add( item22, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item0.Add( item20, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item23 = wx.BoxSizer( wx.HORIZONTAL )
    
    item24 = wx.Button( parent, ID_BTNOK, "OK", wx.DefaultPosition, wx.DefaultSize, 0 )
    item24.SetDefault()
    item23.Add( item24, 0, wx.ALIGN_CENTER|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item25 = wx.Button( parent, ID_BTNQUIT, "Abbandona", wx.DefaultPosition, wx.DefaultSize, 0 )
    item23.Add( item25, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item0.Add( item23, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )

    item0.AddGrowableCol( 0 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_OK = 10028

def VersionInfoFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item1 = wx.TextCtrl( parent, ID_VERINFO, "", wx.DefaultPosition, [600,400], wx.TE_MULTILINE )
    item1.SetFont( wx.Font( 9, wx.MODERN, wx.NORMAL, wx.NORMAL ) )
    item0.Add( item1, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item2 = wx.BoxSizer( wx.HORIZONTAL )
    
    item3 = wx.Button( parent, ID_OK, "OK", wx.DefaultPosition, wx.DefaultSize, 0 )
    item2.Add( item3, 0, wx.ALIGN_CENTER|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item0.Add( item2, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )

    item0.AddGrowableCol( 0 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_LOGO = 10029

def AboutLogoPanelFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item1 = wx.StaticBitmap(parent, ID_LOGO, images.getX4LogoBitmap())#, style=wx.SUNKEN_BORDER)
    item0.Add( item1, 0, wx.ALIGN_CENTER, 5 )

    item0.Add( [ 130, 20 ] , 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item0.AddGrowableCol( 1 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_VERSION = 10030
ID_BRANCH = 10031
ID_LABELMOD = 10032
ID_MODVERSION = 10033

def AboutProgramPanelFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 2, 0, 0 )
    
    item0.Add( [ 20, 20 ] , 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item0.Add( [ 20, 20 ] , 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item0.Add( [ 260, 20 ] , 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item1 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item2 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item3 = AppDescStaticText( parent, ID_TEXT, "X4 Gestione Aziendale", wx.DefaultPosition, wx.DefaultSize, 0 )
    item3.SetFont( wx.Font( 18, wx.SWISS, wx.NORMAL, wx.BOLD ) )
    item3.SetName( "appdesc" )
    item2.Add( item3, 0, wx.ALIGN_RIGHT|wx.ALIGN_BOTTOM|wx.LEFT|wx.RIGHT, 5 )

    item2.Add( [ 20, 10 ] , 0, wx.ALIGN_CENTER|wx.LEFT|wx.RIGHT, 5 )

    item4 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item5 = wx.FlexGridSizer( 0, 2, 0, 0 )
    
    item6 = wx.StaticText(parent, ID_APPINFO,  version.VERSION_TYPEXT); item6.SetFont(wx.Font(12, wx.SWISS, wx.NORMAL, wx.BOLD)); item6.SetForegroundColour('gray')
    item5.Add( item6, 0, wx.ALIGN_RIGHT|wx.ALIGN_BOTTOM|wx.RIGHT, 5 )

    item7 = wx.StaticText(parent, ID_VERSION,  'v.%s' % version.__version__); item7.SetFont(wx.Font(12, wx.SWISS, wx.NORMAL, wx.BOLD)); item7.SetForegroundColour('gray')
    item5.Add( item7, 0, wx.ALIGN_RIGHT|wx.ALIGN_BOTTOM|wx.RIGHT, 5 )

    item4.Add( item5, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )

    item8 = BranchText(parent, ID_BRANCH)
    item4.Add( item8, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 5 )

    item2.Add( item4, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )

    item9 = wx.FlexGridSizer( 0, 2, 0, 0 )
    
    item10 = wx.BoxSizer( wx.HORIZONTAL )
    
    item11 = wx.StaticText( parent, ID_LABELMOD, "cust.", wx.DefaultPosition, wx.DefaultSize, 0 )
    item11.SetForegroundColour( wx.LIGHT_GREY )
    item11.SetName( "labelmod" )
    item10.Add( item11, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 5 )

    item12 = wx.StaticText(parent, ID_MODNAME,  version.MODVERSION_NAME); item12.SetName('modname'); item12.SetFont(wx.Font(12, wx.SWISS, wx.NORMAL, wx.BOLD)); item12.SetForegroundColour('gray')
    item10.Add( item12, 0, wx.ALIGN_CENTER|wx.RIGHT, 5 )

    item13 = wx.StaticText(parent, ID_MODVERSION,  version.__modversion__); item13.SetName('modversion'); item13.SetFont(wx.Font(12, wx.SWISS, wx.NORMAL, wx.BOLD)); item13.SetForegroundColour('gray')
    item10.Add( item13, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 5 )

    item9.Add( item10, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )

    item9.AddGrowableCol( 1 )

    item2.Add( item9, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )

    item2.Add( [ 20, 10 ] , 0, wx.ALIGN_CENTER|wx.LEFT|wx.RIGHT, 5 )

    item2.AddGrowableCol( 0 )

    item1.Add( item2, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item1.Add( [ 16, 16 ] , 0, wx.ALIGN_CENTER, 5 )

    item1.AddGrowableCol( 0 )

    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT, 5 )

    item0.AddGrowableCol( 1 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_PANGRIDPLUGINS = 10034
ID_PLUGINNAME = 10035
ID_PLUGINDESC = 10036
ID_PLUGINVERS = 10037
ID_PLUGINAUTH = 10038
ID_PLUGININFO = 10039
ID_PLUGINEND = 10040

def PluginsFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item1 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item2 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item3 = wx.StaticText( parent, ID_TEXT, "Elenco dei plugin installati", wx.DefaultPosition, wx.DefaultSize, 0 )
    item3.SetForegroundColour( wx.BLUE )
    item2.Add( item3, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.TOP, 5 )

    item4 = wx.StaticLine( parent, ID_LINE, wx.DefaultPosition, [20,-1], wx.LI_HORIZONTAL )
    item2.Add( item4, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item5 = wx.Panel( parent, ID_PANGRIDPLUGINS, wx.DefaultPosition, [350,160], wx.SUNKEN_BORDER )
    item2.Add( item5, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item2.AddGrowableCol( 0 )

    item2.AddGrowableRow( 2 )

    item1.Add( item2, 0, wx.GROW, 5 )

    item6 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item7 = wx.StaticText( parent, ID_TEXT, "Informazioni sul plugin", wx.DefaultPosition, [350,-1], 0 )
    item7.SetForegroundColour( wx.BLUE )
    item6.Add( item7, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.TOP, 5 )

    item8 = wx.StaticLine( parent, ID_LINE, wx.DefaultPosition, [20,-1], wx.LI_HORIZONTAL )
    item6.Add( item8, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item9 = wx.FlexGridSizer( 0, 2, 0, 0 )
    
    item10 = wx.StaticText( parent, ID_TEXT, "Nome:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.Add( item10, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.TOP|wx.BOTTOM, 5 )

    item11 = wx.StaticText( parent, ID_PLUGINNAME, "plugin", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.Add( item11, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.TOP|wx.BOTTOM, 5 )

    item12 = wx.StaticText( parent, ID_TEXT, "Descrizione:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.Add( item12, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.BOTTOM, 5 )

    item13 = wx.StaticText( parent, ID_PLUGINDESC, "Descrizione plugin", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.Add( item13, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.BOTTOM, 5 )

    item14 = wx.StaticText( parent, ID_TEXT, "Versione:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.Add( item14, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.BOTTOM, 5 )

    item15 = wx.StaticText( parent, ID_PLUGINVERS, "0.0.00", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.Add( item15, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.BOTTOM, 5 )

    item16 = wx.StaticText( parent, ID_TEXT, "Autore:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.Add( item16, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.BOTTOM, 5 )

    item17 = wx.StaticText( parent, ID_PLUGINAUTH, "Astra S.r.l.", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.Add( item17, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.BOTTOM, 5 )

    item18 = wx.StaticText( parent, ID_TEXT, "Info:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.Add( item18, 0, wx.ALIGN_RIGHT|wx.RIGHT|wx.TOP|wx.BOTTOM, 5 )

    item19 = wx.TextCtrl( parent, ID_PLUGININFO, "", wx.DefaultPosition, [80,180], wx.TE_MULTILINE )
    item9.Add( item19, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.TOP|wx.BOTTOM, 5 )

    item9.AddGrowableCol( 1 )

    item9.AddGrowableRow( 4 )

    item6.Add( item9, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item6.AddGrowableCol( 0 )

    item6.AddGrowableRow( 2 )

    item1.Add( item6, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item1.AddGrowableCol( 1 )

    item1.AddGrowableRow( 0 )

    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item20 = wx.Button( parent, ID_PLUGINEND, "Chiudi", wx.DefaultPosition, wx.DefaultSize, 0 )
    item20.SetDefault()
    item0.Add( item20, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item0.AddGrowableCol( 0 )

    item0.AddGrowableRow( 0 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_UPDATESLOGO = 10041
ID_URL = 10042
ID_PANGRIDUPDATES = 10043

def ProgramUpdateFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item1 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item2 = wx.StaticBitmap(parent, ID_UPDATESLOGO, images.getProgramUpdateBitmap())#, style=wx.SUNKEN_BORDER)
    item1.Add( item2, 0, wx.ALIGN_CENTER, 5 )

    item3 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item4 = wx.StaticText( parent, ID_TEXT, "Aggiornamenti programma", wx.DefaultPosition, wx.DefaultSize, 0 )
    item3.Add( item4, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.TOP, 5 )

    item5 = wx.StaticLine( parent, ID_LINE, wx.DefaultPosition, [20,-1], wx.LI_HORIZONTAL )
    item3.Add( item5, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item6 = wx.FlexGridSizer( 0, 2, 0, 0 )
    
    item7 = wx.StaticText( parent, ID_TEXT, "URL:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item6.Add( item7, 0, wx.ALIGN_CENTER|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item8 = wx.StaticText( parent, ID_URL, "http://", wx.DefaultPosition, wx.DefaultSize, 0 )
    item6.Add( item8, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item6.AddGrowableCol( 1 )

    item3.Add( item6, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item3.AddGrowableCol( 0 )

    item1.Add( item3, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.TOP|wx.BOTTOM, 5 )

    item1.AddGrowableCol( 1 )

    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item9 = wx.Panel( parent, ID_PANGRIDUPDATES, wx.DefaultPosition, [600,160], wx.SUNKEN_BORDER )
    item0.Add( item9, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item10 = wx.StaticText( parent, ID_MESSAGE, "-", wx.DefaultPosition, [200,-1], wx.ALIGN_CENTRE )
    item0.Add( item10, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item11 = wx.Gauge( parent, ID_PROGRESS, 100, wx.DefaultPosition, [-1,14], 0 )
    item0.Add( item11, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.TOP, 5 )

    item12 = wx.StaticText( parent, ID_BYTES, "", wx.DefaultPosition, wx.DefaultSize, wx.ALIGN_CENTRE )
    item0.Add( item12, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item13 = wx.BoxSizer( wx.HORIZONTAL )
    
    item14 = wx.Button( parent, ID_CANCEL, "Chiudi", wx.DefaultPosition, wx.DefaultSize, 0 )
    item13.Add( item14, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item15 = wx.Button( parent, ID_ACTION, "Verifica", wx.DefaultPosition, wx.DefaultSize, 0 )
    item15.SetDefault()
    item13.Add( item15, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item0.Add( item13, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item0.AddGrowableCol( 0 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_BACKUPDIR = 10044
ID_BUTREFRESH = 10045
ID_SOLAZI = 10046
ID_PANGRIDBACKUP = 10047
ID_BUTNEW = 10048

def BackupExplorerFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item1 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item2 = wx.StaticText( parent, ID_TEXT, "Cartella dei files di backup delle aziende:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item1.Add( item2, 0, wx.ALIGN_CENTER|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item3 = FolderEntryCtrl( parent, ID_BACKUPDIR, "", wx.DefaultPosition, [280,-1], 0 )
    item3.SetName( "backupdir" )
    item1.Add( item3, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item4 = BitmapButton(parent, ID_BUTREFRESH, awimages.getUndo20Bitmap()); item4.SetName('butrefresh'); item4.SetToolTipString("Ricarica il contenuto della cartella")
    item1.Add( item4, 0, wx.ALIGN_CENTER|wx.LEFT|wx.RIGHT, 5 )

    item5 = wx.CheckBox( parent, ID_SOLAZI, "Mostra solo i backup di questa azienda", wx.DefaultPosition, wx.DefaultSize, 0 )
    item5.SetValue( True )
    item5.SetName( "solazi" )
    item1.Add( item5, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item1.AddGrowableCol( 1 )

    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item6 = wx.StaticLine( parent, ID_LINE, wx.DefaultPosition, [20,-1], wx.LI_HORIZONTAL )
    item0.Add( item6, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item7 = wx.StaticText( parent, ID_TEXT, "Elenco dei files di backup presenti:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item7.SetForegroundColour( wx.BLUE )
    item0.Add( item7, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT, 5 )

    item8 = wx.Panel( parent, ID_PANGRIDBACKUP, wx.DefaultPosition, [900,350], wx.SUNKEN_BORDER )
    item8.SetName( "pangridbackup" )
    item0.Add( item8, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item9 = wx.Button( parent, ID_BUTNEW, "Crea nuovo backup", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.SetName( "butnew" )
    item0.Add( item9, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item0.AddGrowableCol( 0 )

    item0.AddGrowableRow( 3 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_TITLETEXT = 10049
ID_FILENAME = 10050
ID_COMMENT = 10051
ID_ALLEGATI = 10052
ID_ALLTABLES = 10053
ID_SELECTALL = 10054
ID_TABLES = 10055
ID_WARNING = 10056
ID_BUTOK = 10057

def SpecificheBackupFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item1 = wx.StaticText( parent, ID_TITLETEXT, "Creazione nuovo backup", wx.DefaultPosition, wx.DefaultSize, 0 )
    item1.SetForegroundColour( wx.BLUE )
    item1.SetFont( wx.Font( 12, wx.SWISS, wx.NORMAL, wx.BOLD ) )
    item1.SetName( "titletext" )
    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item2 = wx.StaticLine( parent, ID_LINE, wx.DefaultPosition, [20,-1], wx.LI_HORIZONTAL )
    item0.Add( item2, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item3 = wx.FlexGridSizer( 0, 2, 0, 0 )
    
    item4 = wx.StaticText( parent, ID_TEXT, "File:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item3.Add( item4, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.TOP|wx.BOTTOM, 5 )

    item5 = wx.TextCtrl( parent, ID_FILENAME, "", wx.DefaultPosition, [200,-1], 0 )
    item5.SetName( "filename" )
    item3.Add( item5, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item6 = wx.StaticText( parent, ID_TEXT, "Commento:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item3.Add( item6, 0, wx.ALIGN_RIGHT|wx.LEFT|wx.BOTTOM, 5 )

    item7 = wx.TextCtrl( parent, ID_COMMENT, "", wx.DefaultPosition, [300,60], wx.TE_MULTILINE )
    item7.SetName( "comment" )
    item3.Add( item7, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item3.Add( [ 20, 20 ] , 0, wx.ALIGN_CENTER, 5 )

    item8 = wx.CheckBox( parent, ID_ALLEGATI, "Includi i files degli allegati", wx.DefaultPosition, wx.DefaultSize, 0 )
    item8.SetName( "allegati" )
    item3.Add( item8, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item3.Add( [ 20, 20 ] , 0, wx.ALIGN_CENTER, 5 )

    item9 = wx.CheckBox( parent, ID_ALLTABLES, "Includi tutte le tabelle dell'azienda", wx.DefaultPosition, wx.DefaultSize, 0 )
    item9.SetValue( True )
    item9.SetName( "alltables" )
    item3.Add( item9, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item3.Add( [ 20, 20 ] , 0, wx.ALIGN_CENTER, 5 )

    item10 = wx.CheckBox( parent, ID_SELECTALL, "Seleziona tutte le tabelle elencate", wx.DefaultPosition, wx.DefaultSize, 0 )
    item10.SetValue( True )
    item10.SetName( "selectall" )
    item3.Add( item10, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item11 = wx.StaticText( parent, ID_TEXT, "Tabelle:", wx.DefaultPosition, wx.DefaultSize, 0 )
    item3.Add( item11, 0, wx.ALIGN_RIGHT|wx.LEFT|wx.BOTTOM, 5 )

    item12 = ElencoTabelleAziendaCheckListBox( parent, ID_TABLES, wx.DefaultPosition, [500,260], [], wx.LB_SINGLE )
    item12.SetName( "tables" )
    item3.Add( item12, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item3.AddGrowableCol( 1 )

    item3.AddGrowableRow( 5 )

    item0.Add( item3, 0, wx.GROW, 5 )

    item13 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item14 = wx.StaticText( parent, ID_WARNING, "", wx.DefaultPosition, wx.DefaultSize, 0 )
    item14.SetForegroundColour( wx.RED )
    item14.SetFont( wx.Font( 12, wx.SWISS, wx.NORMAL, wx.BOLD ) )
    item14.SetName( "warning" )
    item13.Add( item14, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.ALL, 5 )

    item15 = wx.Button( parent, ID_BUTOK, "Avvia Backup", wx.DefaultPosition, [120,-1], 0 )
    item15.SetFont( wx.Font( 10, wx.SWISS, wx.NORMAL, wx.BOLD ) )
    item15.SetName( "butok" )
    item13.Add( item15, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.BOTTOM, 5 )

    item13.AddGrowableCol( 0 )

    item0.Add( item13, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item0.AddGrowableCol( 0 )

    item0.AddGrowableRow( 2 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

ID_LOGO_AZIENDALE = 10058

def UserLicenseInfoFunc( parent, call_fit = True, set_sizer = True ):
    item0 = wx.BoxSizer( wx.VERTICAL )
    
    item1 = wx.FlexGridSizer( 1, 0, 0, 0 )
    
    item2 = LogoAziendaleBitmap(parent, ID_LOGO_AZIENDALE, size=(64,64)); item2.SetName('logo_aziendale')
    item1.Add( item2, 0, wx.ALIGN_CENTER|wx.ALL, 5 )

    item3 = wx.FlexGridSizer( 0, 1, 0, 0 )
    
    item4 = wx.StaticText( parent, ID_TEXT, "", wx.DefaultPosition, wx.DefaultSize, 0 )
    item4.SetForegroundColour( wx.BLUE )
    item4.SetFont( wx.Font( 12, wx.SWISS, wx.NORMAL, wx.BOLD ) )
    item4.SetName( "lic_ragsoc" )
    item3.Add( item4, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.TOP, 5 )

    item5 = wx.StaticText( parent, ID_TEXT, "", wx.DefaultPosition, wx.DefaultSize, 0 )
    item5.SetForegroundColour( wx.BLUE )
    item5.SetFont( wx.Font( 10, wx.SWISS, wx.NORMAL, wx.BOLD ) )
    item5.SetName( "lic_piva" )
    item3.Add( item5, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL|wx.LEFT|wx.RIGHT|wx.TOP, 5 )

    item3.AddGrowableCol( 0 )

    item1.Add( item3, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    item1.AddGrowableCol( 1 )

    item0.Add( item1, 0, wx.GROW|wx.ALIGN_CENTER_VERTICAL, 5 )

    if set_sizer == True:
        parent.SetSizer( item0 )
        if call_fit == True:
            item0.SetSizeHints( parent )
    
    return item0

# Menubar functions

ID_QUIT = 10059
ID_MENUFILE = 10060
ID_GESCLIENT = 10061
ID_GESCLIENT_CATEGO = 10062
ID_GESCLIENT_STATUS = 10063
ID_MENU = 10064
ID_GESFORNIT = 10065
ID_GESFORNIT_CATEGO = 10066
ID_GESFORNIT_STATUS = 10067
ID_GESALQIVA = 10068
ID_CFGSTATI = 10069
ID_MENUTABGLOBAL = 10070
ID_GESBILPDC = 10071
ID_GESTIPANA = 10072
ID_GESBILMAS = 10073
ID_GESBILCON = 10074
ID_GESSTATPDC = 10075
ID_GESBILSTR = 10076
ID_GESBRIMAS = 10077
ID_GESBRICON = 10078
ID_GESBILRICLSTR = 10079
ID_GESTBILRICL = 10080
ID_GESBILCEE = 10081
ID_GESPDCCEE = 10082
ID_GESTBILCEE = 10083
ID_GESCASSE = 10084
ID_GESBANCHE = 10085
ID_GESEFFETT = 10086
ID_GESDATIFISC_CLI = 10087
ID_GESDATIFISC_FOR = 10088
ID_GESTDATIFISC_CF = 10089
ID_MENUTABCONTAB = 10090
ID_GESPROD = 10091
ID_GESPROD_TIPART = 10092
ID_GESPROD_CATART = 10093
ID_GESPROD_GRUART = 10094
ID_GESPROD_MARART = 10095
ID_GESPROD_STATUS = 10096
ID_GESINVSTR = 10097
ID_RICLASPRO = 10098
ID_GESPROD_GRUPREZ = 10099
ID_GESPROD_TIPLIST = 10100
ID_GESLISVEN = 10101
ID_GESSTALIS = 10102
ID_LISVEN = 10103
ID_GESGRPCLI = 10104
ID_STAGRPCLI = 10105
ID_GRIPCLI = 10106
ID_GESGRPFOR = 10107
ID_STAGRPFOR = 10108
ID_GRIPFOR = 10109
ID_GESPRODPROMO = 10110
ID_GESTRACAU = 10111
ID_GESTRACUR = 10112
ID_GESTRAPOR = 10113
ID_GESTRAVET = 10114
ID_GESTRAASP = 10115
ID_GESTRACON = 10116
ID_MENUTRASP = 10117
ID_BARCODESPOT = 10118
ID_MENUBARCODES = 10119
ID_MENUTABMAGAZZ = 10120
ID_GESMODPAG = 10121
ID_GESGRUSCA = 10122
ID_MENUTABSCAD = 10123
ID_GESTZONE = 10124
ID_GESTAGENTI = 10125
ID_GESTSPEINC = 10126
ID_MENUTABVEND = 10127
ID_MENUTAB = 10128
ID_CONTABGES_ACQVEN = 10129
ID_CONTABGES_INCPAG = 10130
ID_CONTABGES_ALTRO = 10131
ID_CONTABGES_SOLIVA = 10132
ID_MENUCONTINS = 10133
ID_INTCONCLI = 10134
ID_INTCONFOR = 10135
ID_INTCONCAS = 10136
ID_INTCONBAN = 10137
ID_INTCONEFF = 10138
ID_INTCONPDC = 10139
ID_INTCONTAB = 10140
ID_INTREGCON = 10141
ID_INTREGIVA = 10142
ID_INTALIQIVA = 10143
ID_INCPAGDET = 10144
ID_FATCONACQVEN = 10145
ID_VENDAZIPRIV = 10146
ID_VENDXALIQIVA = 10147
ID_MENUCONTINT = 10148
ID_CTR_CASSA = 10149
ID_CTR_QUADCON = 10150
ID_CONTAB_GIORNALE = 10151
ID_CONTAB_MASTRI = 10152
ID_MENUSTAFIS = 10153
ID_CONTABIL_VERIF = 10154
ID_CONTABIL_GEST = 10155
ID_CONTABIL_CONTR = 10156
ID_MENUBIL = 10157
ID_CONTABRI_VERIF = 10158
ID_CONTABRI_GEST = 10159
ID_CONTABRI_CONTR = 10160
ID_BILRICL = 10161
ID_CONTABIL_CEE = 10162
ID_BILCEE = 10163
ID_REGIVA = 10164
ID_LIQIVA = 10165
ID_IVASEQ = 10166
ID_MENUIVA = 10167
ID_CONTAB_SPESOM = 10168
ID_MENUCONTGES = 10169
ID_MENUCONT = 10170
ID_MAGAZZINS = 10171
ID_INTPROD = 10172
ID_INTDOCMAG = 10173
ID_INTMOVMAG = 10174
ID_INTDOCPAG = 10175
ID_INTINVENT = 10176
ID_INTSOTTOSC = 10177
ID_INTSOTTOSCBK = 10178
ID_MENU_MAGINT_GIAC = 10179
ID_INTMAGCLI = 10180
ID_INTMAGACC = 10181
ID_INTMAGSRCDES = 10182
ID_INTMAGFOR = 10183
ID_MENU_MAGINT_ANAG = 10184
ID_INTEVAMAG = 10185
ID_INTGIAPRE = 10186
ID_MENU_MAGINT_EVAS = 10187
ID_STATFATCLI = 10188
ID_STATFATCLIDES = 10189
ID_STATFATCLICAT = 10190
ID_STATFATPRO = 10191
ID_STATFATPROCLI = 10192
ID_STATFATAGE = 10193
ID_STATFATCATART = 10194
ID_PDCSINTART = 10195
ID_STATPREAPP = 10196
ID_STATREDDVEND = 10197
ID_MENU_MAGINT_STAT_VEND = 10198
ID_STATFATFOR = 10199
ID_STATFATFORCAT = 10200
ID_STATCOSACQ = 10201
ID_MENU_MAGINT_STAT_ACQ = 10202
ID_MENU_MAGINT_STAT = 10203
ID_PROVAGE = 10204
ID_MODPROVAGE = 10205
ID_MENUPROVAGE = 10206
ID_INTDOCVET = 10207
ID_MAGAZZINT = 10208
ID_STADIFF = 10209
ID_MAGOPEDIF = 10210
ID_MAGPRODPRORIC = 10211
ID_MAGPRODCOSTIZERO = 10212
ID_MENUMAGELAB = 10213
ID_FATTURAPA_GENERA = 10214
ID_FATTURAPA_FOLDER = 10215
ID_FATTURAPA_ELENCO = 10216
ID_MENUFTEL = 10217
ID_MENUMAG = 10218
ID_SCADINS = 10219
ID_INTPCFCLI = 10220
ID_INTPCFFOR = 10221
ID_SCAD_SCAD = 10222
ID_SCAD_SCADGRP = 10223
ID_SCAD_CTRQUAD = 10224
ID_SCAD_CALCINT = 10225
ID_SCAD_SITFIDO = 10226
ID_SCAD_GLOBAL = 10227
ID_SCAD_GLOBAL_INCASSI = 10228
ID_SCAD_GLOBAL_PAGAMENTI = 10229
ID_SCAD_GLOBAL_EFFETTIDAEMETTERE = 10230
ID_SCAD_GLOBAL_EFFETTIEMESSI = 10231
ID_SCAD_GLOBAL_EFFETTIINSOLUTI = 10232
ID_MENUSCAD = 10233
ID_EMIEFF = 10234
ID_RAGGRPCF = 10235
ID_MENUEFF = 10236
ID_CFGCONCAU = 10237
ID_CFGAUTCON = 10238
ID_CFGPDCRANGE = 10239
ID_CFGPROGRCON = 10240
ID_CFGSPESOM = 10241
ID_CFGREGIVA = 10242
ID_CFGLIQIVA = 10243
ID_MENUSETUP_CONTAB = 10244
ID_CFGMAGCAU = 10245
ID_CFGMAGAZZ = 10246
ID_CFGAUTMAG = 10247
ID_CFGFTDIF = 10248
ID_MENUSETUP_MAGAZZ = 10249
ID_CFGAZIENDA = 10250
ID_CFGWKS = 10251
ID_CFGUPDATES = 10252
ID_CFGLICENSE = 10253
ID_CFGACTIVATIONCODES = 10254
ID_MENUSETUP_IMPOSTAZIONI = 10255
ID_CFGEMAIL = 10256
ID_CFGXMPP = 10257
ID_CFGDOCSEMAIL = 10258
ID_MENUSETUP_COMM = 10259
ID_CFGTIPEVENT = 10260
ID_CFGEVENTMGR = 10261
ID_MENUEVENTI = 10262
ID_MENUSETUP_OPZIONI = 10263
ID_MENUSETUP = 10264
ID_CHIUSCONT_SOVRAPP = 10265
ID_CHIUSCONT_GENMOV = 10266
ID_CHIUSCONT_ANNUALE = 10267
ID_MENUCHIUSCONTAB = 10268
ID_CHIUSIVA_CHIUSIVA = 10269
ID_MENUCHIUSIVA = 10270
ID_CHIUSMAGAZZ_CREACOSTI = 10271
ID_CHIUSMAGAZZ_EDITGIAC = 10272
ID_CHIUSMAGAZZ_GENMOVINI = 10273
ID_MENUCHIUSMAGAZZ = 10274
ID_MENUCHIUSURE = 10275
ID_BACKUPEXPLORER = 10276
ID_CHANGEIVA = 10277
ID_UTILITY = 10278
ID_MENUSTRUMENTI = 10279
ID_ABOUT = 10280
ID_UPDATES = 10281

def XMenuBarFunc():
    item0 = wx.MenuBar(wx.MB_DOCKABLE)
    
    item1 = wx.Menu()
    item1.Append( ID_QUIT, "Esci\tAlt-Ctrl-Q", "Chiude la sessione di lavoro" )
    item0.Append( item1, "File" )
    
    item2 = wx.Menu()
    
    item3 = wx.Menu()
    item3.Append( ID_GESCLIENT, "Clienti\tCtrl-C", "Gestione tabella Clienti" )
    item3.Append( ID_GESCLIENT_CATEGO, "Categorie clienti", "Gestione tabella Categorie Clienti" )
    item3.Append( ID_GESCLIENT_STATUS, "Status clienti", "Gestione tabella Status Clienti" )
    item3.AppendSeparator()
    item3.Append( ID_GESFORNIT, "Fornitori\tCtrl-F", "Gestione tabella Fornitori" )
    item3.Append( ID_GESFORNIT_CATEGO, "Categorie Fornitori", "Gestione tabella Categorie Fornitori" )
    item3.Append( ID_GESFORNIT_STATUS, "Status fornitori", "Gestione tabella Status Fornitori" )
    item3.AppendSeparator()
    item3.Append( ID_GESALQIVA, "Aliquote IVA\tCtrl-I", "Gestione tabella Aliquote IVA" )
    item3.AppendSeparator()
    item3.Append( ID_CFGSTATI, "Stati\tCtrl-S", "Manutenzione tabella Stati" )
    item2.AppendMenu( ID_MENUTABGLOBAL, "Globali", item3 )

    
    item4 = wx.Menu()
    item4.Append( ID_GESBILPDC, "Piano dei Conti\tCtrl-O", "Gestione tabella Sottoconti (Intero Piano dei Conti)" )
    item4.AppendSeparator()
    item4.Append( ID_GESTIPANA, "Tipi Sottoconto", "Gestione tabella Tipi di Sottoconto (classificazione non contabile)" )
    item4.Append( ID_GESBILMAS, "Mastri", "Gestione tabella Mastri di Bilancio" )
    item4.Append( ID_GESBILCON, "Conti", "Gestione tabella Conti di Bilancio" )
    item4.Append( ID_GESSTATPDC, "Status Sottoconti", "Gestione tabella Status Sottoconti" )
    item4.Append( ID_GESBILSTR, "Struttura del Piano dei Conti", "Visualizzazione e stampa la struttura gerarchica del Piano dei Conti" )
    
    item5 = wx.Menu()
    item5.Append( ID_GESBRIMAS, "Mastri", "Gestione tabella Mastri Bilancio Riclassificato" )
    item5.Append( ID_GESBRICON, "Conti", "Gestione tabella Conti Bilancio Riclassificato" )
    item5.Append( ID_GESBILRICLSTR, "Struttura del Piano dei Conti", "Visualizzazione e stampa la struttura gerarchica del Piano dei Conti" )
    item4.AppendMenu( ID_GESTBILRICL, "Bilancio riclassificato", item5 )

    
    item6 = wx.Menu()
    item6.Append( ID_GESBILCEE, "Classificazioni Bilancio CEE", "Gestione tabella Piano dei Conti riclassificato CEE" )
    item6.Append( ID_GESPDCCEE, "Piano dei Conti riclassificato CEE", "Gestione tabella Sottoconti (Intero Piano dei Conti) visto secondo la classificazione CEE" )
    item4.AppendMenu( ID_GESTBILCEE, "Bilancio CEE", item6 )

    item4.AppendSeparator()
    item4.Append( ID_GESCASSE, "Casse\tCtrl-A", "Gestione tabella Sottoconti di tipo Cassa" )
    item4.Append( ID_GESBANCHE, "Banche\tCtrl-B", "Gestione tabella Sottoconti di tipo Banca" )
    item4.Append( ID_GESEFFETT, "Effetti\tCtrl-E", "Gestione tabella Sottoconti di tipo Effetto" )
    item4.AppendSeparator()
    
    item7 = wx.Menu()
    item7.Append( ID_GESDATIFISC_CLI, "Clienti\tCtrl-A", "Manutenzione veloce dati fiscali clienti" )
    item7.Append( ID_GESDATIFISC_FOR, "Fornitori\tCtrl-A", "Manutenzione veloce dati fiscali fornitori" )
    item4.AppendMenu( ID_GESTDATIFISC_CF, "Dati fiscali", item7 )

    item2.AppendMenu( ID_MENUTABCONTAB, "Contabilità", item4 )

    
    item8 = wx.Menu()
    item8.Append( ID_GESPROD, "Prodotti\tCtrl-P", "Gestione tabella Articoli di Magazzino" )
    item8.AppendSeparator()
    item8.Append( ID_GESPROD_TIPART, "Tipi Prodotto", "Gestione tabella Tipi prodotto" )
    item8.Append( ID_GESPROD_CATART, "Categorie", "Gestione tabella Categorie merce" )
    item8.Append( ID_GESPROD_GRUART, "Gruppi", "Gestione tabella Gruppi merce" )
    item8.Append( ID_GESPROD_MARART, "Marche prodotti", "Gestione tabella Gruppi merce" )
    item8.Append( ID_GESPROD_STATUS, "Status prodotti", "Gestione tabella Status prodotti" )
    item8.Append( ID_GESINVSTR, "Struttura Inventario", "Visualizzazione e stampa la struttura gerarchica del'inventario" )
    item8.AppendSeparator()
    item8.Append( ID_RICLASPRO, "Riclassificazione prodotti", "Consente di riclassificare un insieme di prodotti" )
    item8.AppendSeparator()
    item8.Append( ID_GESPROD_GRUPREZ, "Gruppi prezzo", "Gestione tabella Gruppi prezzo" )
    item8.AppendSeparator()
    
    item9 = wx.Menu()
    item9.Append( ID_GESPROD_TIPLIST, "Tipi Listino", "Gestione tabella Tipi listino" )
    item9.Append( ID_GESLISVEN, "Manutenzione", "Gestione dei Listini di vendita" )
    item9.Append( ID_GESSTALIS, "Consultazione prezzi in vigore", "Consultazione dei prezzi attualmente in vigore sui Listini di Vendita" )
    item8.AppendMenu( ID_LISVEN, "Listini di vendita", item9 )

    
    item10 = wx.Menu()
    item10.Append( ID_GESGRPCLI, "Manutenzione", "Gestione delle Griglie di prezzo per i clienti" )
    item10.Append( ID_STAGRPCLI, "Consultazione prezzi in vigore", "Consultazione dei prezzi attualmente in vigore sulle Griglie di prezzo per i clienti" )
    item8.AppendMenu( ID_GRIPCLI, "Griglie prezzi clienti", item10 )

    
    item11 = wx.Menu()
    item11.Append( ID_GESGRPFOR, "Manutenzione", "Gestione delle Griglie di prezzo per i fornitori" )
    item11.Append( ID_STAGRPFOR, "Consultazione prezzi in vigore", "Consultazione dei prezzi attualmente in vigore sulle Griglie di prezzo per i fornitori" )
    item8.AppendMenu( ID_GRIPFOR, "Griglie prezzi fornitori", item11 )

    item8.Append( ID_GESPRODPROMO, "Condizioni promozionali", "Gestione condizioni promozionali di vendita" )
    item8.AppendSeparator()
    
    item12 = wx.Menu()
    item12.Append( ID_GESTRACAU, "Causali", "Gestione tabella Causali di trasporto" )
    item12.Append( ID_GESTRACUR, "A cura", "Gestione tabella Trasporto a cura" )
    item12.Append( ID_GESTRAPOR, "Porto", "Gestione tabella Tipo di porto" )
    item12.Append( ID_GESTRAVET, "Vettori", "Gestione tabella Vettori di consegna" )
    item12.Append( ID_GESTRAASP, "Aspetto esteriore dei beni", "Gestione tabella Aspetto esteriore dei beni" )
    item12.Append( ID_GESTRACON, "Tipi di incasso dei contrassegni", "Gestione tabella Tipi di incasso dei contrassegni" )
    item8.AppendMenu( ID_MENUTRASP, "Dati trasporto", item12 )

    item8.AppendSeparator()
    
    item13 = wx.Menu()
    item13.Append( ID_BARCODESPOT, "Stampa articoli spot", "" )
    item8.AppendMenu( ID_MENUBARCODES, "Gestione codici a barre", item13 )

    item2.AppendMenu( ID_MENUTABMAGAZZ, "Magazzino", item8 )

    
    item14 = wx.Menu()
    item14.Append( ID_GESMODPAG, "Modalità di pagamento", "Gestione tabella Modalità di pagamento" )
    item14.Append( ID_GESGRUSCA, "Criteri di gruppo", "Gestione tabella Raggruppamenti per Scadenzario Clienti/Fornitori" )
    item2.AppendMenu( ID_MENUTABSCAD, "Scadenzario Clienti/Fornitori", item14 )

    item2.AppendSeparator()
    
    item15 = wx.Menu()
    item15.Append( ID_GESTZONE, "Zone", "Gestione tabella Zone" )
    item15.Append( ID_GESTAGENTI, "Agenti", "Gestione tabella Agenti" )
    item15.Append( ID_GESTSPEINC, "Spese di incasso", "Gestione tabella Spese di incasso su effetti" )
    item2.AppendMenu( ID_MENUTABVEND, "Organizzazione Vendite", item15 )

    item0.Append( item2, "Tabelle" )
    
    item16 = wx.Menu()
    
    item17 = wx.Menu()
    item17.Append( ID_CONTABGES_ACQVEN, "Acquisti e Vendite\tCtrl-F5", "Inserimento registrazioni IVA (Acquisti/Vendite)" )
    item17.Append( ID_CONTABGES_INCPAG, "Incassi e Pagamenti\tCtrl-F6", "Inserimento registrazioni di tipo Incasso/Pagamento" )
    item17.Append( ID_CONTABGES_ALTRO, "Altre registrazioni\tCtrl-F7", "Inserimento registrazioni semplici/composte senza legame a scadenzari" )
    item17.AppendSeparator()
    item17.Append( ID_CONTABGES_SOLIVA, "Scritture di sola IVA\tCtrl-F8", "Inserimento registrazioni di sola IVA" )
    item16.AppendMenu( ID_MENUCONTINS, "Inserisci", item17 )

    
    item18 = wx.Menu()
    
    item19 = wx.Menu()
    item19.Append( ID_INTCONCLI, "Clienti\tAlt-C", "Interrogazione Mastri Clienti con dati anagrafici completi" )
    item19.Append( ID_INTCONFOR, "Fornitori\tAlt-F", "Interrogazione Mastri Fornitori con dati anagrafici completi" )
    item19.AppendSeparator()
    item19.Append( ID_INTCONCAS, "Casse\tAlt-A", "Interrogazione Mastri Sottoconti Cassa con dati anagrafici completi" )
    item19.Append( ID_INTCONBAN, "Banche\tAlt-B", "Interrogazione Mastri Sottoconti Banca con dati anagrafici completi" )
    item19.Append( ID_INTCONEFF, "Effetti\tAlt-E", "Interrogazione Mastri Sottoconti Effetti con dati anagrafici completi" )
    item19.AppendSeparator()
    item19.Append( ID_INTCONPDC, "Piano dei conti\tAlt-O", "Interrogazione Mastri intero Piano dei Conti con sole informazioni contabili" )
    item18.AppendMenu( ID_INTCONTAB, "Mastri", item19 )

    item18.Append( ID_INTREGCON, "Registrazioni contabili", "Interrogazione registrazioni contabili" )
    item18.Append( ID_INTREGIVA, "Registrazioni IVA", "Interrogazione registrazioni IVA" )
    item18.Append( ID_INTALIQIVA, "Utilizzo Aliquote IVA\tAlt-I", "Interrogazione Aliquote IVA" )
    item18.AppendSeparator()
    item18.Append( ID_INCPAGDET, "Dettaglio incassi/pagamenti", "Mostra il dettaglio incassi/pagamenti dei sottoconti cassa/banca" )
    item18.AppendSeparator()
    item18.Append( ID_FATCONACQVEN, "Analisi fatturato acquisti/vendite", "Analizza le vendite di un periodo e ne evidenzia imponibile ed imposta per anagrafica" )
    item18.Append( ID_VENDAZIPRIV, "Sintesi vendite privati/aziende", "Analizza le vendite di un periodo e ne evidenzia imponibile ed imposta per anagrafica" )
    item18.Append( ID_VENDXALIQIVA, "Riepilogo vendite per aliquova iva", "" )
    item16.AppendMenu( ID_MENUCONTINT, "Interroga", item18 )

    
    item20 = wx.Menu()
    item20.Append( ID_CTR_CASSA, "Controllo saldo cassa/banca", "Controllo saldo contabile sottoconti Cassa/Banca" )
    item20.Append( ID_CTR_QUADCON, "Controllo quadratura registrazioni", "Controlli di coerenza sulle registrazioni contabili" )
    item20.AppendSeparator()
    
    item21 = wx.Menu()
    item21.Append( ID_CONTAB_GIORNALE, "Libro giornale", "Interrogazione e stampa del Libro Giornale" )
    item21.Append( ID_CONTAB_MASTRI, "Mastri sottoconto", "Interrogazione e stampa dei Mastri" )
    item20.AppendMenu( ID_MENUSTAFIS, "Stampe fiscali", item21 )

    
    item22 = wx.Menu()
    item22.Append( ID_CONTABIL_VERIF, "Verifica", "Interrogazione Bilancio di Verifica" )
    item22.Append( ID_CONTABIL_GEST, "Gestionale", "Interrogazione Bilancio Gestionale" )
    item22.Append( ID_CONTABIL_CONTR, "Contrapposto", "Interrogazione Bilancio Contrapposto" )
    item20.AppendMenu( ID_MENUBIL, "Bilancio", item22 )

    
    item23 = wx.Menu()
    item23.Append( ID_CONTABRI_VERIF, "Verifica", "Interrogazione Bilancio di Verifica Riclassificato" )
    item23.Append( ID_CONTABRI_GEST, "Gestionale", "Interrogazione Bilancio Gestionale Riclassificato" )
    item23.Append( ID_CONTABRI_CONTR, "Contrapposto", "Interrogazione Bilancio Contrapposto Riclassificato" )
    item20.AppendMenu( ID_BILRICL, "Bilancio Riclassificato", item23 )

    
    item24 = wx.Menu()
    item24.Append( ID_CONTABIL_CEE, "Bilancio Riclassificato CEE", "Interrogazione Bilancio Riclassificato CEE" )
    item20.AppendMenu( ID_BILCEE, "Bilancio Riclassificato CEE", item24 )

    item20.AppendSeparator()
    
    item25 = wx.Menu()
    item25.Append( ID_REGIVA, "Registri IVA", "Consultazione e stampa Registri IVA" )
    item25.Append( ID_LIQIVA, "Liquidazione IVA", "Interrogazione e gestione Liquidazioni IVA" )
    item25.Append( ID_IVASEQ, "Controllo sequenza protocolli", "Controllo corretta sequenza protocolli IVA di un registro" )
    item20.AppendMenu( ID_MENUIVA, "IVA", item25 )

    item20.AppendSeparator()
    item20.Append( ID_CONTAB_SPESOM, "Spesometro", "Analisi operazioni di acquisto/vendita per compilazione spesometro" )
    item16.AppendMenu( ID_MENUCONTGES, "Gestione", item20 )

    item0.Append( item16, "Contabilità" )
    
    item26 = wx.Menu()
    item26.Append( ID_MAGAZZINS, "Immissione documenti\tCtrl-D", "Inserimento documenti di magazzino" )
    
    item27 = wx.Menu()
    item27.Append( ID_INTPROD, "Prodotto\tAlt-P", "Interrogazione scheda e mastro prodotto" )
    item27.Append( ID_INTDOCMAG, "Documenti\tAlt-D", "Interrogazione documenti" )
    item27.Append( ID_INTMOVMAG, "Movimenti\tAlt-M", "Interrogazione movimenti" )
    item27.AppendSeparator()
    item27.Append( ID_INTDOCPAG, "Stato pagamento documenti", "Interrogazione documenti e stato di pagamento" )
    
    item28 = wx.Menu()
    item28.Append( ID_INTINVENT, "Inventario\tAlt-I", "Interrogazione e stampa Inventari" )
    item28.Append( ID_INTSOTTOSC, "Sottoscorta", "Interrogazione e stampa prodotti sottoscorta" )
    item28.Append( ID_INTSOTTOSCBK, "Sottoscorta da backorders\tAlt-Ctrl-S", "Interrogazione e stampa prodotti sottoscorta con disponibilità da backorders" )
    item27.AppendMenu( ID_MENU_MAGINT_GIAC, "Giacenze", item28 )

    item27.AppendSeparator()
    
    item29 = wx.Menu()
    item29.Append( ID_INTMAGCLI, "Clienti", "Interrogazione scheda e dati di magazzino dei clienti" )
    item29.Append( ID_INTMAGACC, "Situazione acconti clienti", "Interrogazione acconti disponibili dei clienti" )
    item29.Append( ID_INTMAGSRCDES, "Ricerca destinazioni merce", "Ricerca clienti da destinazione merce" )
    item29.AppendSeparator()
    item29.Append( ID_INTMAGFOR, "Fornitori", "Interrogazione scheda e dati di magazzino dei fornitori" )
    item27.AppendMenu( ID_MENU_MAGINT_ANAG, "Anagrafiche", item29 )

    item27.AppendSeparator()
    
    item30 = wx.Menu()
    item30.Append( ID_INTEVAMAG, "Stato evasione movimenti\tAlt-V", "" )
    item30.Append( ID_INTGIAPRE, "Inventario presunto", "Interrogazione e stampa Inventario presunto" )
    item27.AppendMenu( ID_MENU_MAGINT_EVAS, "Evasione", item30 )

    item27.AppendSeparator()
    
    item31 = wx.Menu()
    
    item32 = wx.Menu()
    item32.Append( ID_STATFATCLI, "Fatturato Clienti", "Statistica sul fatturato clienti" )
    item32.Append( ID_STATFATCLIDES, "Fatturato Clienti per destinazione", "Statistica sul fatturato clienti divisi per destinazione" )
    item32.Append( ID_STATFATCLICAT, "Fatturato Clienti per Categoria prodotto", "Statistica sul fatturato clienti per categoria merce" )
    item32.AppendSeparator()
    item32.Append( ID_STATFATPRO, "Fatturato Prodotti", "Statistica sul fatturato prodotti" )
    item32.Append( ID_STATFATPROCLI, "Fatturato Prodotti per Cliente", "Statistica sul fatturato prodotti per cliente" )
    item32.AppendSeparator()
    item32.Append( ID_STATFATAGE, "Fatturato Agenti", "Statistica sul fatturato agenti" )
    item32.Append( ID_STATFATCATART, "Fatturato Categorie prodotto", "Statistica sul fatturato per categoria prodotto" )
    item32.Append( ID_PDCSINTART, "Schede clienti con sintesi vendite prodotti", "" )
    item32.AppendSeparator()
    item32.Append( ID_STATPREAPP, "Valutazione Prezzi di Vendita", "Statistica sui prezzi di vendita applicati" )
    item32.AppendSeparator()
    item32.Append( ID_STATREDDVEND, "Redditività delle vendite", "" )
    item31.AppendMenu( ID_MENU_MAGINT_STAT_VEND, "Vendite", item32 )

    
    item33 = wx.Menu()
    item33.Append( ID_STATFATFOR, "Fatturato Fornitori", "Statistica sul fatturato fornitori" )
    item33.Append( ID_STATFATFORCAT, "Fatturato Fornitori per Categoria prodotto", "Statistica sul fatturato fornitori per categoria merce" )
    item33.AppendSeparator()
    item33.Append( ID_STATCOSACQ, "Valutazione Costi di Acquisto", "Statistica sui costi di acquisto presenti" )
    item31.AppendMenu( ID_MENU_MAGINT_STAT_ACQ, "Acquisti", item33 )

    item27.AppendMenu( ID_MENU_MAGINT_STAT, "Statistiche", item31 )

    
    item34 = wx.Menu()
    item34.Append( ID_PROVAGE, "Calcolo provvigioni agenti", "Visualizza e stampa le provvigioni degli agenti" )
    item34.Append( ID_MODPROVAGE, "Modifica provvigioni agenti", "Modifica agente e percentuali di provvigione sui documenti" )
    item27.AppendMenu( ID_MENUPROVAGE, "Provvigoni agenti", item34 )

    item27.AppendSeparator()
    item27.Append( ID_INTDOCVET, "Vettori", "Interrogazione vettori" )
    item26.AppendMenu( ID_MAGAZZINT, "Interroga", item27 )

    
    item35 = wx.Menu()
    item35.Append( ID_STADIFF, "Stampa differita", "Stampa un insieme di documenti" )
    item35.AppendSeparator()
    item26.AppendMenu( ID_MAGOPEDIF, "Operazioni differite", item35 )

    
    item36 = wx.Menu()
    item36.Append( ID_MAGPRODPRORIC, "Ricalcolo progressivi prodotti", "" )
    item36.Append( ID_MAGPRODCOSTIZERO, "Aggiornamento costi nulli sui movimenti", "" )
    item26.AppendMenu( ID_MENUMAGELAB, "Elaborazioni", item36 )

    
    item37 = wx.Menu()
    item37.Append( ID_FATTURAPA_GENERA, "Genera file per la trasmissione\tShift-Ctrl-F", "Genera file da trasmettere a SDI" )
    item37.Append( ID_FATTURAPA_FOLDER, "Apri cartella files generati", "Apre la cartella dei files generati" )
    item37.Append( ID_FATTURAPA_ELENCO, "Documenti trasmessi/da trasmettere", "Visualizza l'elenco dei documenti fattura elettronica" )
    item26.AppendMenu( ID_MENUFTEL, "Fattura PA", item37 )

    item0.Append( item26, "Magazzino" )
    
    item38 = wx.Menu()
    item38.Append( ID_SCADINS, "Inserisci", "" )
    
    item39 = wx.Menu()
    item39.Append( ID_INTPCFCLI, "Clienti", "Interrogazione Scadenzario Clienti con dati anagrafici completi" )
    item39.Append( ID_INTPCFFOR, "Fornitori", "Interrogazione Scadenzario Fornitori con dati anagrafici completi" )
    item38.AppendMenu( ID_MENU, "Interroga", item39 )

    
    item40 = wx.Menu()
    item40.Append( ID_SCAD_SCAD, "Scadenzario Clienti/Fornitori", "Interrogazione Scadenzari Clienti/Fornitori" )
    item40.Append( ID_SCAD_SCADGRP, "Scadenzario Clienti/Fornitori di gruppo", "Interrogazione Scadenzari Clienti/Fornitori di gruppo" )
    item40.Append( ID_SCAD_CTRQUAD, "Controllo quadratura con mastri", "" )
    item40.Append( ID_SCAD_CALCINT, "Calcolo interessi partite clienti scadute", "" )
    item40.Append( ID_SCAD_SITFIDO, "Situazione affidamenti clienti", "" )
    
    item41 = wx.Menu()
    item41.Append( ID_SCAD_GLOBAL, "Analisi scadenzario globale (cash-flow)", "Analisi dinamica delle scadenze Clienti/Fornitori" )
    item41.AppendSeparator()
    item41.Append( ID_SCAD_GLOBAL_INCASSI, "Previsione generale incassi", "Analizza le partite dei clienti e ne sintetizza le scadenze" )
    item41.Append( ID_SCAD_GLOBAL_PAGAMENTI, "Previsione generale pagamenti", "Analizza le partite dei fornitori e ne sintetizza le scadenze" )
    item41.AppendSeparator()
    item41.Append( ID_SCAD_GLOBAL_EFFETTIDAEMETTERE, "Portafoglio effetti da emettere", "Analizza gli effetti da emettere e ne sintetizza le scadenze" )
    item41.Append( ID_SCAD_GLOBAL_EFFETTIEMESSI, "Scadenzario effetti", "Analizza gli effetti emessi e ne sintetizza le scadenze" )
    item41.AppendSeparator()
    item41.Append( ID_SCAD_GLOBAL_EFFETTIINSOLUTI, "Effetti insoluti", "Analizza gli effetti insoluti e ne sintetizza le scadenze" )
    item40.AppendMenu( ID_MENU, "Cash flow", item41 )

    item38.AppendMenu( ID_MENU, "Gestione", item40 )

    item0.Append( item38, "Scadenzari" )
    
    item42 = wx.Menu()
    item42.Append( ID_EMIEFF, "Gestione ed emissione effetti", "Manutenzione e Gestione Effetti" )
    item42.Append( ID_RAGGRPCF, "Accorpamento scadenze", "" )
    item42.AppendSeparator()
    item42.Append( ID_SCAD_GLOBAL_EFFETTIDAEMETTERE, "Portafoglio effetti da emettere", "Analizza gli effetti da emettere e ne sintetizza le scadenze" )
    item42.Append( ID_SCAD_GLOBAL_EFFETTIEMESSI, "Scadenzario effetti", "Analizza gli effetti emessi e ne sintetizza le scadenze" )
    item42.AppendSeparator()
    item42.Append( ID_SCAD_GLOBAL_EFFETTIINSOLUTI, "Effetti insoluti", "Analizza gli effetti insoluti e ne sintetizza le scadenze" )
    item0.Append( item42, "Effetti" )
    
    item43 = wx.Menu()
    
    item44 = wx.Menu()
    
    item45 = wx.Menu()
    item45.Append( ID_CFGCONCAU, "Causali", "Manutenzione tabella Causali contabili" )
    item45.Append( ID_CFGAUTCON, "Automatismi", "Impostazione automatismi contaibili" )
    item45.Append( ID_CFGPDCRANGE, "Range sottoconti", "" )
    item45.AppendSeparator()
    item45.Append( ID_CFGPROGRCON, "Progressivi", "Manutenzione dei progressivi contabili" )
    item45.Append( ID_CFGSPESOM, "Massimali spesometro", "Imposta i massimali per anno di aziende/privati per lo spesometro" )
    item45.AppendSeparator()
    
    item46 = wx.Menu()
    item46.Append( ID_CFGREGIVA, "Registri", "Manutenzione tabella Registri IVA" )
    item46.Append( ID_CFGLIQIVA, "Progressivi liquidazioni", "Manutenzione progressivi IVA" )
    item45.AppendMenu( ID_MENU, "IVA", item46 )

    item44.AppendMenu( ID_MENUSETUP_CONTAB, "Contabilità", item45 )

    
    item47 = wx.Menu()
    item47.Append( ID_CFGMAGCAU, "Causali", "Manutenzione tabella Causali Magazzino (Documenti/Movimenti)" )
    item47.Append( ID_CFGMAGAZZ, "Magazzini", "Gestione tabella Magazzini" )
    item47.Append( ID_CFGAUTMAG, "Automatismi", "Impostazione Automatismi Magazzino" )
    item47.Append( ID_CFGFTDIF, "Fatturazione differita", "Impostazione tipi di fatturazione e/o raggruppamento documenti" )
    item44.AppendMenu( ID_MENUSETUP_MAGAZZ, "Magazzino", item47 )

    item44.AppendSeparator()
    
    item48 = wx.Menu()
    item48.Append( ID_CFGAZIENDA, "Setup Azienda", "Imposta i dati aziendali e le caratteristiche di base della sua gestione" )
    item48.Append( ID_CFGWKS, "Setup Workstation", "Impostazione caratteristiche del posto di lavoro" )
    item48.Append( ID_CFGUPDATES, "Setup Aggiornamenti", "Impostazio il download e la distribuzione degli aggiornamenti" )
    item48.AppendSeparator()
    item48.Append( ID_CFGLICENSE, "Licenza d'uso", "Imposta il tipo di licenza d'so del programma" )
    item48.Append( ID_CFGACTIVATIONCODES, "Codici di attivazione", "" )
    item44.AppendMenu( ID_MENUSETUP_IMPOSTAZIONI, "Impostazioni", item48 )

    
    item49 = wx.Menu()
    
    item50 = wx.Menu()
    item50.Append( ID_CFGEMAIL, "Setup Posta elettronica", "Imposta i parametri occorrenti alla spedizione di messaggi email" )
    item50.Append( ID_CFGXMPP, "Setup Messaggistica immediata", "Imposta i parametri occorrenti alla spedizione di messaggi XMPP" )
    item50.AppendSeparator()
    item50.Append( ID_CFGDOCSEMAIL, "Setup invio documenti per posta elettronica", "Imposta i parametri occorrenti alla spedizione di documenti via email" )
    item49.AppendMenu( ID_MENUSETUP_COMM, "Comunicazioni", item50 )

    
    item51 = wx.Menu()
    item51.Append( ID_CFGTIPEVENT, "Tipi evento", "Gestione tabella Tipi evento" )
    item51.AppendSeparator()
    item51.Append( ID_CFGEVENTMGR, "Eventi", "Gestione tabella Eventi" )
    item49.AppendMenu( ID_MENUEVENTI, "Eventi", item51 )

    item44.AppendMenu( ID_MENUSETUP_OPZIONI, "Opzioni", item49 )

    item43.AppendMenu( ID_MENUSETUP, "Setup", item44 )

    
    item52 = wx.Menu()
    
    item53 = wx.Menu()
    item53.Append( ID_CHIUSCONT_SOVRAPP, "Attiva sovrapposizione di esercizi", "Attiva la sovrapposizione d'esercizio" )
    item53.Append( ID_CHIUSCONT_GENMOV, "Genera movimenti di chiusura/apertura", "Genera i movimenti di chiusura/apertura" )
    item53.Append( ID_CHIUSCONT_ANNUALE, "Chiusura contabile", "Chiude definitivamente l'esercizio in corso" )
    item52.AppendMenu( ID_MENUCHIUSCONTAB, "Contabilità", item53 )

    
    item54 = wx.Menu()
    item54.Append( ID_CHIUSIVA_CHIUSIVA, "Chiusura IVA", "Riporta il credito di fine anno come credito IVA compensabile per l'anno successivo" )
    item52.AppendMenu( ID_MENUCHIUSIVA, "IVA", item54 )

    
    item55 = wx.Menu()
    item55.Append( ID_CHIUSMAGAZZ_CREACOSTI, "Consolidamento costi", "Consolida i costi e le giacenze alla data di chiusura" )
    item55.Append( ID_CHIUSMAGAZZ_EDITGIAC, "Manutenzione giacenze rilevate", "Edita le giacenze rilevate ed i costi dei prodotti" )
    item55.Append( ID_CHIUSMAGAZZ_GENMOVINI, "Genera movimenti giacenza iniziale", "Genera i movimenti di giacenza iniziale" )
    item52.AppendMenu( ID_MENUCHIUSMAGAZZ, "Magazzino", item55 )

    item43.AppendMenu( ID_MENUCHIUSURE, "Chiusure", item52 )

    item43.Append( ID_BACKUPEXPLORER, "Backup Explorer\tAlt-Ctrl-B", "Backup e Restore del database dell'azienda" )
    item43.AppendSeparator()
    
    item56 = wx.Menu()
    item56.Append( ID_CHANGEIVA, "Modifica Cod.Iva su prodotti", "" )
    item43.AppendMenu( ID_UTILITY, "Utilità", item56 )

    item0.Append( item43, "Strumenti" )
    
    item57 = wx.Menu()
    item57.Append( ID_ABOUT, "Informazioni sulla versione\tCtrl-?", "" )
    item57.Append( ID_UPDATES, "Verifica disponibilità aggiornamenti", "" )
    item0.Append( item57, "?" )
    
    return item0

# Toolbar functions

# Bitmap functions


# End of generated file
